!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Accept	tools/csapp.c	/^int Accept(int s, struct sockaddr *addr, socklen_t *addrlen) $/;"	f
Alarm	tools/csapp.c	/^unsigned int Alarm(unsigned int seconds) {$/;"	f
Bind	tools/csapp.c	/^void Bind(int sockfd, struct sockaddr *my_addr, int addrlen) $/;"	f
Calloc	tools/csapp.c	/^void *Calloc(size_t nmemb, size_t size) $/;"	f
Close	tools/csapp.c	/^void Close(int fd) $/;"	f
Connect	tools/csapp.c	/^void Connect(int sockfd, struct sockaddr *serv_addr, int addrlen) $/;"	f
DEF_MODE	tools/csapp.h	30;"	d
DEF_UMASK	tools/csapp.h	31;"	d
DWORD	tools/mytools.h	/^typedef unsigned long  DWORD;$/;"	t
Dup2	tools/csapp.c	/^int Dup2(int fd1, int fd2) $/;"	f
Execve	tools/csapp.c	/^void Execve(const char *filename, char *const argv[], char *const envp[]) $/;"	f
Fclose	tools/csapp.c	/^void Fclose(FILE *fp) $/;"	f
Fdopen	tools/csapp.c	/^FILE *Fdopen(int fd, const char *type) $/;"	f
Fgets	tools/csapp.c	/^char *Fgets(char *ptr, int n, FILE *stream) $/;"	f
Fopen	tools/csapp.c	/^FILE *Fopen(const char *filename, const char *mode) $/;"	f
Fork	tools/csapp.c	/^pid_t Fork(void) $/;"	f
Fputs	tools/csapp.c	/^void Fputs(const char *ptr, FILE *stream) $/;"	f
Fread	tools/csapp.c	/^size_t Fread(void *ptr, size_t size, size_t nmemb, FILE *stream) $/;"	f
Free	tools/csapp.c	/^void Free(void *ptr) $/;"	f
Fstat	tools/csapp.c	/^void Fstat(int fd, struct stat *buf) $/;"	f
Fwrite	tools/csapp.c	/^void Fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream) $/;"	f
Gethostbyaddr	tools/csapp.c	/^struct hostent *Gethostbyaddr(const char *addr, int len, int type) $/;"	f
Gethostbyname	tools/csapp.c	/^struct hostent *Gethostbyname(const char *name) $/;"	f
Getpgrp	tools/csapp.c	/^pid_t Getpgrp(void) {$/;"	f
Kill	tools/csapp.c	/^void Kill(pid_t pid, int signum) $/;"	f
LISTENQ	tools/csapp.h	57;"	d
Listen	tools/csapp.c	/^void Listen(int s, int backlog) $/;"	f
Lseek	tools/csapp.c	/^off_t Lseek(int fildes, off_t offset, int whence) $/;"	f
MAXBUF	tools/csapp.h	56;"	d
MAXLINE	tools/csapp.h	55;"	d
Malloc	tools/csapp.c	/^void *Malloc(size_t size) $/;"	f
Mmap	tools/csapp.c	/^void *Mmap(void *addr, size_t len, int prot, int flags, int fd, off_t offset) $/;"	f
Munmap	tools/csapp.c	/^void Munmap(void *start, size_t length) $/;"	f
Open	tools/csapp.c	/^int Open(const char *pathname, int flags, mode_t mode) $/;"	f
Open_clientfd	tools/csapp.c	/^int Open_clientfd(char *hostname, int port) $/;"	f
Open_listenfd	tools/csapp.c	/^int Open_listenfd(int port) $/;"	f
P	tools/csapp.c	/^void P(sem_t *sem) $/;"	f
Pause	tools/csapp.c	/^void Pause() $/;"	f
Pthread_cancel	tools/csapp.c	/^void Pthread_cancel(pthread_t tid) {$/;"	f
Pthread_create	tools/csapp.c	/^void Pthread_create(pthread_t *tidp, pthread_attr_t *attrp, $/;"	f
Pthread_detach	tools/csapp.c	/^void Pthread_detach(pthread_t tid) {$/;"	f
Pthread_exit	tools/csapp.c	/^void Pthread_exit(void *retval) {$/;"	f
Pthread_join	tools/csapp.c	/^void Pthread_join(pthread_t tid, void **thread_return) {$/;"	f
Pthread_once	tools/csapp.c	/^void Pthread_once(pthread_once_t *once_control, void (*init_function)()) {$/;"	f
Pthread_self	tools/csapp.c	/^pthread_t Pthread_self(void) {$/;"	f
RIO_BUFSIZE	tools/csapp.h	41;"	d
Read	tools/csapp.c	/^ssize_t Read(int fd, void *buf, size_t count) $/;"	f
Realloc	tools/csapp.c	/^void *Realloc(void *ptr, size_t size) $/;"	f
Rio_readinitb	tools/csapp.c	/^void Rio_readinitb(rio_t *rp, int fd)$/;"	f
Rio_readlineb	tools/csapp.c	/^ssize_t Rio_readlineb(rio_t *rp, void *usrbuf, size_t maxlen) $/;"	f
Rio_readn	tools/csapp.c	/^ssize_t Rio_readn(int fd, void *ptr, size_t nbytes) $/;"	f
Rio_readnb	tools/csapp.c	/^ssize_t Rio_readnb(rio_t *rp, void *usrbuf, size_t n) $/;"	f
Rio_writen	tools/csapp.c	/^void Rio_writen(int fd, void *usrbuf, size_t n) $/;"	f
SA	tools/csapp.h	/^typedef struct sockaddr SA;$/;"	t	typeref:struct:sockaddr
Select	tools/csapp.c	/^int Select(int  n, fd_set *readfds, fd_set *writefds,$/;"	f
Sem_init	tools/csapp.c	/^void Sem_init(sem_t *sem, int pshared, unsigned int value) $/;"	f
Setpgid	tools/csapp.c	/^void Setpgid(pid_t pid, pid_t pgid) {$/;"	f
Setsockopt	tools/csapp.c	/^void Setsockopt(int s, int level, int optname, const void *optval, int optlen) $/;"	f
Sigaddset	tools/csapp.c	/^void Sigaddset(sigset_t *set, int signum)$/;"	f
Sigdelset	tools/csapp.c	/^void Sigdelset(sigset_t *set, int signum)$/;"	f
Sigemptyset	tools/csapp.c	/^void Sigemptyset(sigset_t *set)$/;"	f
Sigfillset	tools/csapp.c	/^void Sigfillset(sigset_t *set)$/;"	f
Sigismember	tools/csapp.c	/^int Sigismember(const sigset_t *set, int signum)$/;"	f
Signal	tools/csapp.c	/^handler_t *Signal(int signum, handler_t *handler) $/;"	f
Sigprocmask	tools/csapp.c	/^void Sigprocmask(int how, const sigset_t *set, sigset_t *oldset)$/;"	f
Sleep	tools/csapp.c	/^unsigned int Sleep(unsigned int secs) $/;"	f
Socket	tools/csapp.c	/^int Socket(int domain, int type, int protocol) $/;"	f
Stat	tools/csapp.c	/^void Stat(const char *filename, struct stat *buf) $/;"	f
V	tools/csapp.c	/^void V(sem_t *sem) $/;"	f
WORD	tools/mytools.h	/^typedef unsigned int WORD;$/;"	t
Wait	tools/csapp.c	/^pid_t Wait(int *status) $/;"	f
Waitpid	tools/csapp.c	/^pid_t Waitpid(pid_t pid, int *iptr, int options) $/;"	f
Write	tools/csapp.c	/^ssize_t Write(int fd, const void *buf, size_t count) $/;"	f
__CSAPP_H__	tools/csapp.h	3;"	d
app_error	tools/csapp.c	/^void app_error(char *msg) \/* application error *\/$/;"	f
cs	tools/mytools.h	/^    DWORD cs; $/;"	m	struct:my_user_regs
dns_error	tools/csapp.c	/^void dns_error(char *msg) \/* dns-style error *\/$/;"	f
ds	tools/mytools.h	/^    DWORD ds; $/;"	m	struct:my_user_regs
dynamicPrint	dynatest/dynamicprint.c	/^dynamicPrint (int argc, char *argv[]  )$/;"	f
dynprintFunc	dynatest/myecho.c	/^bool (*dynprintFunc)(int, char *[]);$/;"	v
echo	tools/mytools.c	/^echo (int connfd)$/;"	f
eflags	tools/mytools.h	/^    DWORD eflags; $/;"	m	struct:my_user_regs
es	tools/mytools.h	/^    DWORD es; $/;"	m	struct:my_user_regs
fs	tools/mytools.h	/^    DWORD fs; $/;"	m	struct:my_user_regs
fs_base	tools/mytools.h	/^    DWORD fs_base; $/;"	m	struct:my_user_regs
g_argc	dynatest/myecho.c	/^int g_argc;$/;"	v
g_argv	dynatest/myecho.c	/^char **g_argv;$/;"	v
g_envp	dynatest/myecho.c	/^char **g_envp;$/;"	v
gs	tools/mytools.h	/^    DWORD gs; $/;"	m	struct:my_user_regs
gs_base	tools/mytools.h	/^    DWORD gs_base; $/;"	m	struct:my_user_regs
handle	dynatest/myecho.c	/^void *handle;$/;"	v
handler2	dynatest/handlertest.c	/^handler2 (int sig  )$/;"	f
handler_t	tools/csapp.h	/^typedef void handler_t(int);$/;"	t
loadFunc	dynatest/myecho.c	/^loadFunc ( int argc, char *argv[], char *envp[])$/;"	f
main	c_s_test/c.c	/^main ( int argc, char *argv[] )$/;"	f
main	c_s_test/s.c	/^main ( int argc, char *argv[] )$/;"	f
main	dynatest/changeDlopen.c	/^main ( int argc, char *argv[] )$/;"	f
main	dynatest/handlertest.c	/^main ( int argc, char *argv[] )$/;"	f
main	dynatest/myecho.c	/^main(int argc, char *argv[], char *envp[])$/;"	f
my_user_regs	tools/mytools.h	/^struct my_user_regs { $/;"	s
open_clientfd	tools/csapp.c	/^int open_clientfd(char *hostname, int port) $/;"	f
open_listenfd	tools/csapp.c	/^int open_listenfd(int port) $/;"	f
orig_rax	tools/mytools.h	/^    DWORD orig_rax; $/;"	m	struct:my_user_regs
peekText	tools/mytools.c	/^peekText (pid_t pid, DWORD addr, char *to, size_t size)$/;"	f
pokeText	tools/mytools.c	/^pokeText (pid_t pid, DWORD addr, char *to, size_t size)$/;"	f
posix_error	tools/csapp.c	/^void posix_error(int code, char *msg) \/* posix-style error *\/$/;"	f
printSize	tools/mytools.c	/^printSize (  )$/;"	f
procDLAddr	tools/mytools.c	/^procDLAddr (pid_t pid, const char *pstate, const char *name)$/;"	f
r10	tools/mytools.h	/^    DWORD r10; $/;"	m	struct:my_user_regs
r11	tools/mytools.h	/^    DWORD r11; $/;"	m	struct:my_user_regs
r12	tools/mytools.h	/^    DWORD r12; $/;"	m	struct:my_user_regs
r13	tools/mytools.h	/^    DWORD r13; $/;"	m	struct:my_user_regs
r14	tools/mytools.h	/^    DWORD r14; $/;"	m	struct:my_user_regs
r15	tools/mytools.h	/^    DWORD r15; $/;"	m	struct:my_user_regs
r8	tools/mytools.h	/^    DWORD r8;$/;"	m	struct:my_user_regs
r9	tools/mytools.h	/^    DWORD r9; $/;"	m	struct:my_user_regs
rax	tools/mytools.h	/^    DWORD rax; $/;"	m	struct:my_user_regs
rbp	tools/mytools.h	/^    DWORD rbp; $/;"	m	struct:my_user_regs
rbx	tools/mytools.h	/^    DWORD rbx; $/;"	m	struct:my_user_regs
rcx	tools/mytools.h	/^    DWORD rcx; $/;"	m	struct:my_user_regs
rdi	tools/mytools.h	/^    DWORD rdi; $/;"	m	struct:my_user_regs
rdx	tools/mytools.h	/^    DWORD rdx; $/;"	m	struct:my_user_regs
rio_buf	tools/csapp.h	/^    char rio_buf[RIO_BUFSIZE]; \/* internal buffer *\/$/;"	m	struct:__anon1
rio_bufptr	tools/csapp.h	/^    char *rio_bufptr;          \/* next unread byte in internal buf *\/$/;"	m	struct:__anon1
rio_cnt	tools/csapp.h	/^    int rio_cnt;               \/* unread bytes in internal buf *\/$/;"	m	struct:__anon1
rio_fd	tools/csapp.h	/^    int rio_fd;                \/* descriptor for this internal buf *\/$/;"	m	struct:__anon1
rio_read	tools/csapp.c	/^static ssize_t rio_read(rio_t *rp, char *usrbuf, size_t n)$/;"	f	file:
rio_readinitb	tools/csapp.c	/^void rio_readinitb(rio_t *rp, int fd) $/;"	f
rio_readlineb	tools/csapp.c	/^ssize_t rio_readlineb(rio_t *rp, void *usrbuf, size_t maxlen) $/;"	f
rio_readn	tools/csapp.c	/^ssize_t rio_readn(int fd, void *usrbuf, size_t n) $/;"	f
rio_readnb	tools/csapp.c	/^ssize_t rio_readnb(rio_t *rp, void *usrbuf, size_t n) $/;"	f
rio_t	tools/csapp.h	/^} rio_t;$/;"	t	typeref:struct:__anon1
rio_writen	tools/csapp.c	/^ssize_t rio_writen(int fd, void *usrbuf, size_t n) $/;"	f
rip	tools/mytools.h	/^    DWORD rip; $/;"	m	struct:my_user_regs
rsi	tools/mytools.h	/^    DWORD rsi; $/;"	m	struct:my_user_regs
rsp	tools/mytools.h	/^    DWORD rsp; $/;"	m	struct:my_user_regs
signalHandler	dynatest/myecho.c	/^signalHandler(int sig)$/;"	f
spliteTo2DWORDs	tools/mytools.c	/^spliteTo2DWORDs ( char *str, char *spl, DWORD res[2] ) $/;"	f
ss	tools/mytools.h	/^    DWORD ss; $/;"	m	struct:my_user_regs
task_pid	dynatest/changeDlopen.c	/^pid_t task_pid;$/;"	v
unix_error	tools/csapp.c	/^void unix_error(char *msg) \/* unix-style error *\/$/;"	f
