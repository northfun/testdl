!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Accept	csapp.c	/^int Accept(int s, struct sockaddr *addr, socklen_t *addrlen) $/;"	f
ActivateTextOutSpying	cc.c	/^DLLIMPORT void ActivateTextOutSpying (int Activate)$/;"	f
Active	cc.c	/^    int Active;$/;"	m	struct:TEverythingParams	file:
Alarm	csapp.c	/^unsigned int Alarm(unsigned int seconds) {$/;"	f
BeginPos	cc.c	/^    int BeginPos;$/;"	m	struct:TEverythingParams	file:
Bind	csapp.c	/^void Bind(int sockfd, struct sockaddr *my_addr, int addrlen) $/;"	f
Calloc	csapp.c	/^void *Calloc(size_t nmemb, size_t size) $/;"	f
Close	csapp.c	/^void Close(int fd) $/;"	f
Connect	csapp.c	/^void Connect(int sockfd, struct sockaddr *serv_addr, int addrlen) $/;"	f
ConvertToMatchedWordA	cc.c	/^static void ConvertToMatchedWordA(TEverythingParams *TP)$/;"	f	file:
CurParams	cc.c	/^TEverythingParams *CurParams = NULL;$/;"	v
DEF_MODE	csapp.h	30;"	d
DEF_UMASK	csapp.h	31;"	d
DLLIMPORT	cc.c	169;"	d	file:
DLLIMPORT	cc.c	171;"	d	file:
DllMain	cc.c	/^BOOL APIENTRY DllMain (HINSTANCE hInst     \/* Library instance handle. *\/ ,$/;"	f
Dup2	csapp.c	/^int Dup2(int fd1, int fd2) $/;"	f
Execve	csapp.c	/^void Execve(const char *filename, char *const argv[], char *const envp[]) $/;"	f
ExtTextOutANextHook	cc.c	/^ExtTextOutANextHook_t ExtTextOutANextHook = NULL;$/;"	v
ExtTextOutANextHook_t	cc.c	/^typedef BOOL WINAPI (*ExtTextOutANextHook_t)(HDC hdc, int nXStart, int nYStart, UINT fuOptions, CONST RECT *lprc, LPCSTR lpszString, UINT cbString, CONST INT *lpDx);$/;"	t	file:
ExtTextOutWNextHook	cc.c	/^ExtTextOutWNextHook_t ExtTextOutWNextHook = NULL;$/;"	v
ExtTextOutWNextHook_t	cc.c	/^typedef BOOL WINAPI (*ExtTextOutWNextHook_t)(HDC hdc, int nXStart, int nYStart, UINT fuOptions, CONST RECT *lprc, LPCWSTR lpszString, UINT cbString, CONST INT *lpDx);$/;"	t	file:
Fclose	csapp.c	/^void Fclose(FILE *fp) $/;"	f
Fdopen	csapp.c	/^FILE *Fdopen(int fd, const char *type) $/;"	f
Fgets	csapp.c	/^char *Fgets(char *ptr, int n, FILE *stream) $/;"	f
FireFox	cc.c	/^2. 在标题栏，开始菜单及IE, FireFox, Opear等软件上取词时，获取的Y坐标值不正确。见源码包里的src\/win32\/TextOutHook.c的IsInsidePointW()里的注释。$/;"	v
Fopen	csapp.c	/^FILE *Fopen(const char *filename, const char *mode) $/;"	f
Fork	csapp.c	/^pid_t Fork(void) $/;"	f
Fputs	csapp.c	/^void Fputs(const char *ptr, FILE *stream) $/;"	f
Fread	csapp.c	/^size_t Fread(void *ptr, size_t size, size_t nmemb, FILE *stream) $/;"	f
Free	csapp.c	/^void Free(void *ptr) $/;"	f
Fstat	csapp.c	/^void Fstat(int fd, struct stat *buf) $/;"	f
Fwrite	csapp.c	/^void Fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream) $/;"	f
GetWordProc	cc.c	/^GetWordProc_t GetWordProc = NULL;$/;"	v
GetWordProc_t	cc.c	/^typedef void (*GetWordProc_t)(TCurrentMode *);$/;"	t	file:
Gethostbyaddr	csapp.c	/^struct hostent *Gethostbyaddr(const char *addr, int len, int type) $/;"	f
Gethostbyname	csapp.c	/^struct hostent *Gethostbyname(const char *name) $/;"	f
Getpgrp	csapp.c	/^pid_t Getpgrp(void) {$/;"	f
GlobalData	cc.c	/^TGlobalDLLData *GlobalData = NULL;$/;"	v
Kill	csapp.c	/^void Kill(pid_t pid, int signum) $/;"	f
LISTENQ	csapp.h	57;"	d
Listen	csapp.c	/^void Listen(int s, int backlog) $/;"	f
Lseek	csapp.c	/^off_t Lseek(int fildes, off_t offset, int whence) $/;"	f
MAXBUF	csapp.h	56;"	d
MAXLINE	csapp.h	55;"	d
Malloc	csapp.c	/^void *Malloc(size_t size) $/;"	f
MatchedWordA	cc.c	/^    char MatchedWordA[256];$/;"	m	struct:TEverythingParams	file:
MatchedWordW	cc.c	/^    wchar_t MatchedWordW[256];$/;"	m	struct:TEverythingParams	file:
Mmap	csapp.c	/^void *Mmap(void *addr, size_t len, int prot, int flags, int fd, off_t offset) $/;"	f
MouseHookProc	cc.c	/^LRESULT CALLBACK MouseHookProc(int nCode, WPARAM wParam, LPARAM lParam)$/;"	f
Munmap	csapp.c	/^void Munmap(void *start, size_t length) $/;"	f
MyCopyMemory	cc.c	/^static int MyCopyMemory(char *a, const char *b, int len)$/;"	f	file:
Open	csapp.c	/^int Open(const char *pathname, int flags, mode_t mode) $/;"	f
Open_clientfd	csapp.c	/^int Open_clientfd(char *hostname, int port) $/;"	f
Open_listenfd	csapp.c	/^int Open_listenfd(int port) $/;"	f
P	csapp.c	/^void P(sem_t *sem) $/;"	f
Pause	csapp.c	/^void Pause() $/;"	f
Pt	cc.c	/^    POINT Pt;$/;"	m	struct:TEverythingParams	file:
Pthread_cancel	csapp.c	/^void Pthread_cancel(pthread_t tid) {$/;"	f
Pthread_create	csapp.c	/^void Pthread_create(pthread_t *tidp, pthread_attr_t *attrp, $/;"	f
Pthread_detach	csapp.c	/^void Pthread_detach(pthread_t tid) {$/;"	f
Pthread_exit	csapp.c	/^void Pthread_exit(void *retval) {$/;"	f
Pthread_join	csapp.c	/^void Pthread_join(pthread_t tid, void **thread_return) {$/;"	f
Pthread_once	csapp.c	/^void Pthread_once(pthread_once_t *once_control, void (*init_function)()) {$/;"	f
Pthread_self	csapp.c	/^pthread_t Pthread_self(void) {$/;"	f
RIO_BUFSIZE	csapp.h	41;"	d
Read	csapp.c	/^ssize_t Read(int fd, void *buf, size_t count) $/;"	f
Realloc	csapp.c	/^void *Realloc(void *ptr, size_t size) $/;"	f
Rio_readinitb	csapp.c	/^void Rio_readinitb(rio_t *rp, int fd)$/;"	f
Rio_readlineb	csapp.c	/^ssize_t Rio_readlineb(rio_t *rp, void *usrbuf, size_t maxlen) $/;"	f
Rio_readn	csapp.c	/^ssize_t Rio_readn(int fd, void *ptr, size_t nbytes) $/;"	f
Rio_readnb	csapp.c	/^ssize_t Rio_readnb(rio_t *rp, void *usrbuf, size_t n) $/;"	f
Rio_writen	csapp.c	/^void Rio_writen(int fd, void *usrbuf, size_t n) $/;"	f
SA	csapp.h	/^typedef struct sockaddr SA;$/;"	t	typeref:struct:sockaddr
Select	csapp.c	/^int Select(int  n, fd_set *readfds, fd_set *writefds,$/;"	f
Sem_init	csapp.c	/^void Sem_init(sem_t *sem, int pshared, unsigned int value) $/;"	f
SendWordToServer	cc.c	/^static void SendWordToServer()$/;"	f	file:
Setpgid	csapp.c	/^void Setpgid(pid_t pid, pid_t pgid) {$/;"	f
Setsockopt	csapp.c	/^void Setsockopt(int s, int level, int optname, const void *optval, int optlen) $/;"	f
Sigaddset	csapp.c	/^void Sigaddset(sigset_t *set, int signum)$/;"	f
Sigdelset	csapp.c	/^void Sigdelset(sigset_t *set, int signum)$/;"	f
Sigemptyset	csapp.c	/^void Sigemptyset(sigset_t *set)$/;"	f
Sigfillset	csapp.c	/^void Sigfillset(sigset_t *set)$/;"	f
Sigismember	csapp.c	/^int Sigismember(const sigset_t *set, int signum)$/;"	f
Signal	csapp.c	/^handler_t *Signal(int signum, handler_t *handler) $/;"	f
Sigprocmask	csapp.c	/^void Sigprocmask(int how, const sigset_t *set, sigset_t *oldset)$/;"	f
Sleep	csapp.c	/^unsigned int Sleep(unsigned int secs) $/;"	f
Socket	csapp.c	/^int Socket(int domain, int type, int protocol) $/;"	f
Stat	csapp.c	/^void Stat(const char *filename, struct stat *buf) $/;"	f
TEverythingParams	cc.c	/^typedef struct TEverythingParams {$/;"	s	file:
TEverythingParams	cc.c	/^} TEverythingParams;$/;"	t	typeref:struct:TEverythingParams	file:
TextOutANextHook	cc.c	/^TextOutANextHook_t TextOutANextHook = NULL;$/;"	v
TextOutWNextHook	cc.c	/^TextOutWNextHook_t TextOutWNextHook = NULL; $/;"	v
TextOutWNextHook_t	cc.c	/^typedef BOOL WINAPI (*TextOutWNextHook_t)(HDC hdc, int nXStart, int nYStart, LPCWSTR lpszString,int cbString);$/;"	t	file:
ThTypes_Init	cc.c	/^void ThTypes_Init()$/;"	f
Thtypes_End	cc.c	/^void Thtypes_End()$/;"	f
TimerFunc	cc.c	/^void CALLBACK TimerFunc(HWND hWnd,UINT nMsg,UINT nTimerid,DWORD dwTime)$/;"	f
Unicode	cc.c	/^    int Unicode;$/;"	m	struct:TEverythingParams	file:
V	csapp.c	/^void V(sem_t *sem) $/;"	f
WM_MY_SHOW_TRANSLATION	cc.c	/^const int WM_MY_SHOW_TRANSLATION = WM_USER + 300;$/;"	v
WND	cc.c	/^    HWND WND;$/;"	m	struct:TEverythingParams	file:
Wait	csapp.c	/^pid_t Wait(int *status) $/;"	f
Waitpid	csapp.c	/^pid_t Waitpid(pid_t pid, int *iptr, int options) $/;"	f
WordLen	cc.c	/^    int WordLen;$/;"	m	struct:TEverythingParams	file:
Write	csapp.c	/^ssize_t Write(int fd, const void *buf, size_t count) $/;"	f
_TextOutSpy_H_	cc.c	166;"	d	file:
_ThTypes_H_	cc.c	212;"	d	file:
__CSAPP_H__	csapp.h	3;"	d
app_error	csapp.c	/^void app_error(char *msg) \/* application error *\/$/;"	f
dns_error	csapp.c	/^void dns_error(char *msg) \/* dns-style error *\/$/;"	f
dynamicPrint	testos.c	/^dynamicPrint (int argc, char *argv[]  )$/;"	f
dynprintFunc	myecho.c	/^bool (*dynprintFunc)(int, char *[]);$/;"	v
g_argc	myecho.c	/^int g_argc;$/;"	v
g_argv	myecho.c	/^char **g_argv;$/;"	v
g_envp	myecho.c	/^char **g_envp;$/;"	v
g_hInstance	cc.c	/^HINSTANCE g_hInstance = NULL;$/;"	v
hGetWordLib	cc.c	/^HINSTANCE hGetWordLib = 0;$/;"	v
hSynhroMutex	cc.c	/^HANDLE hSynhroMutex = 0;$/;"	v
handle	myecho.c	/^void *handle;$/;"	v
handler_t	csapp.h	/^typedef void handler_t(int);$/;"	t
loadFunc	myecho.c	/^loadFunc ( int argc, char *argv[], char *envp[])$/;"	f
main	myecho.c	/^main(int argc, char *argv[], char *envp[])$/;"	f
open_clientfd	csapp.c	/^int open_clientfd(char *hostname, int port) $/;"	f
open_listenfd	csapp.c	/^int open_listenfd(int port) $/;"	f
posix_error	csapp.c	/^void posix_error(int code, char *msg) \/* posix-style error *\/$/;"	f
rio_buf	csapp.h	/^    char rio_buf[RIO_BUFSIZE]; \/* internal buffer *\/$/;"	m	struct:__anon1
rio_bufptr	csapp.h	/^    char *rio_bufptr;          \/* next unread byte in internal buf *\/$/;"	m	struct:__anon1
rio_cnt	csapp.h	/^    int rio_cnt;               \/* unread bytes in internal buf *\/$/;"	m	struct:__anon1
rio_fd	csapp.h	/^    int rio_fd;                \/* descriptor for this internal buf *\/$/;"	m	struct:__anon1
rio_read	csapp.c	/^static ssize_t rio_read(rio_t *rp, char *usrbuf, size_t n)$/;"	f	file:
rio_readinitb	csapp.c	/^void rio_readinitb(rio_t *rp, int fd) $/;"	f
rio_readlineb	csapp.c	/^ssize_t rio_readlineb(rio_t *rp, void *usrbuf, size_t maxlen) $/;"	f
rio_readn	csapp.c	/^ssize_t rio_readn(int fd, void *usrbuf, size_t n) $/;"	f
rio_readnb	csapp.c	/^ssize_t rio_readnb(rio_t *rp, void *usrbuf, size_t n) $/;"	f
rio_t	csapp.h	/^} rio_t;$/;"	t	typeref:struct:__anon1
rio_writen	csapp.c	/^ssize_t rio_writen(int fd, void *usrbuf, size_t n) $/;"	f
sighandler_t	myecho.c	/^typedef void (*sighandler_t)(int);$/;"	t	file:
signalHandler	myecho.c	/^signalHandler(int sig)$/;"	f
unix_error	csapp.c	/^void unix_error(char *msg) \/* unix-style error *\/$/;"	f
